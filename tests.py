import pytest
import json
from unittest.mock import Mock, AsyncMock, patch
from telegram import Update, User, Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from db_manager import DatabaseManager
from game_master import GameMaster
from test_config import TEST_TABLE_PREFIX

# –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º GameMaster –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
class TestGameMaster(GameMaster):
    def __init__(self, db: DatabaseManager):
        super().__init__(db)
        self.users_table = f"{TEST_TABLE_PREFIX}users"
        self.scenes_table = f"{TEST_TABLE_PREFIX}scenes"
        self.user_states_table = f"{TEST_TABLE_PREFIX}user_states"

    async def get_current_scene(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ü–µ–Ω—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            query = f"SELECT state FROM {self.user_states_table} WHERE user_id = %s"
            result = self.db.execute_query(query, (user_id,))
            
            if not result:
                return None
            
            scene_id = int(result[0][0])
            return self.get_scene(scene_id)
        except Exception as e:
            self.logger.error(f"Error getting current scene: {e}")
            return None

    def get_scene(self, scene_id: int) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ü–µ–Ω—É –ø–æ ID"""
        query = f"""
        SELECT id, parent, description, options 
        FROM {self.scenes_table} 
        WHERE id = %s
        """
        result = self.db.execute_query(query, (scene_id,))
        if result:
            scene_data = result[0]
            return {
                'id': scene_data[0],
                'parent': scene_data[1],
                'description': scene_data[2],
                'options': json.loads(scene_data[3]) if scene_data[3] else {}
            }
        return None

    async def cmd_play(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /play"""
        user_id = update.effective_user.id
        self.logger.info(f"User {user_id} started new game")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ü–µ–Ω—É
        query = f"""
        INSERT INTO {self.user_states_table} (user_id, state) 
        VALUES (%s, '1')
        ON DUPLICATE KEY UPDATE state = '1'
        """
        self.db.execute_query(query, (user_id,))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã
        self.achievement_manager.check_achievements(user_id, "game_start")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ü–µ–Ω—É
        scene = await self.get_current_scene(user_id)
        if scene:
            keyboard = []
            for option_id, option_text in scene['options'].items():
                keyboard.append([InlineKeyboardButton(option_text, callback_data=f"choice_{option_id}")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                f"üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!\n\n{scene['description']}", 
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def cmd_continue(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /continue"""
        user_id = update.effective_user.id
        self.logger.info(f"User {user_id} continues game")
        
        scene = await self.get_current_scene(user_id)
        if scene:
            keyboard = []
            for option_id, option_text in scene['options'].items():
                keyboard.append([InlineKeyboardButton(option_text, callback_data=f"choice_{option_id}")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                f"üéÆ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É...\n\n{scene['description']}", 
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–≥—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /play —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É."
            )

    async def cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        user_id = update.effective_user.id
        self.logger.info(f"User {user_id} requested status")
        
        query = f"""
        SELECT us.state, s.description, u.created_at
        FROM {self.user_states_table} us
        JOIN {self.users_table} u ON u.user_id = us.user_id
        LEFT JOIN {self.scenes_table} s ON s.id = CAST(us.state AS SIGNED)
        WHERE us.user_id = %s
        """
        result = self.db.execute_query(query, (user_id,))
        
        if result and result[0][0]:
            scene_id, current_scene, start_date = result[0]
            status_text = (
                "üìä –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∏–≥—Ä—ã:\n\n"
                f"üéØ –¢–µ–∫—É—â–∞—è —Å—Ü–µ–Ω–∞: {scene_id}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {current_scene[:100]}...\n"
                f"üìÖ –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã: {start_date.strftime('%Y-%m-%d %H:%M')}\n"
            )
            await update.message.reply_text(status_text)
        else:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /play —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É."
            )

    async def cmd_reset(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset"""
        user_id = update.effective_user.id
        self.logger.info(f"User {user_id} requested game reset")
        
        query = f"DELETE FROM {self.user_states_table} WHERE user_id = %s"
        result = self.db.execute_query(query, (user_id,))
        
        if result is not None:
            await update.message.reply_text(
                "üîÑ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /play —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É."
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∏–≥—Ä—ã.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def handle_choice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ –≤ –∏–≥—Ä–µ"""
        query = update.callback_query
        user_id = query.from_user.id
        
        try:
            choice_id = int(query.data.split('_')[1])
            self.logger.info(f"User {user_id} made choice: {choice_id}")
            
            current_scene = await self.get_current_scene(user_id)
            
            update_query = f"""
            UPDATE {self.user_states_table} 
            SET state = %s 
            WHERE user_id = %s
            """
            self.db.execute_query(update_query, (choice_id, user_id))
            
            if current_scene:
                if "death" in current_scene.get('description', '').lower():
                    self.achievement_manager.check_achievements(user_id, "death")
                
                if not current_scene.get('options'):
                    self.achievement_manager.check_achievements(user_id, "game_complete")
                
                self.achievement_manager.check_achievements(user_id, "explore_location", 
                    {"location_id": choice_id})
            
            new_scene = await self.get_current_scene(user_id)
            if new_scene:
                keyboard = []
                for option_id, option_text in new_scene['options'].items():
                    keyboard.append([InlineKeyboardButton(option_text, callback_data=f"choice_{option_id}")])
                
                reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
                
                await query.answer()
                await query.edit_message_text(
                    text=new_scene['description'],
                    reply_markup=reply_markup
                )
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ü–µ–Ω—ã")
                
        except Exception as e:
            self.logger.error(f"Error handling choice: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞")

@pytest.fixture
def db_manager():
    from test_config import DB_CONFIG
    db = DatabaseManager(DB_CONFIG)
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    db.execute_query(f"DELETE FROM {TEST_TABLE_PREFIX}user_states WHERE user_id = 12345")
    db.execute_query(f"DELETE FROM {TEST_TABLE_PREFIX}users WHERE user_id = 12345")
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.execute_query(f"INSERT INTO {TEST_TABLE_PREFIX}users (user_id, username) VALUES (12345, 'test_user')")
    return db

@pytest.fixture
def game_master(db_manager):
    return TestGameMaster(db_manager)

@pytest.fixture
def mock_update():
    update = Mock(spec=Update)
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ effective_user
    update.effective_user = Mock(spec=User)
    update.effective_user.id = 12345
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ message
    update.message = Mock(spec=Message)
    update.message.reply_text = AsyncMock()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ callback_query
    update.callback_query = Mock(spec=CallbackQuery)
    update.callback_query.from_user = Mock(spec=User)
    update.callback_query.from_user.id = 12345
    update.callback_query.answer = AsyncMock()
    update.callback_query.edit_message_text = AsyncMock()
    
    return update

@pytest.fixture
def context():
    return Mock(spec=ContextTypes.DEFAULT_TYPE)

@pytest.mark.asyncio
async def test_cmd_play_new_game(game_master, mock_update, context):
    """–¢–µ—Å—Ç –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã"""
    await game_master.cmd_play(mock_update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ü–µ–Ω—É
    query = f"SELECT state FROM {TEST_TABLE_PREFIX}user_states WHERE user_id = 12345"
    result = game_master.db.execute_query(query)
    assert result[0][0] == '1'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    mock_update.message.reply_text.assert_called_once()
    assert "–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!" in mock_update.message.reply_text.call_args[0][0]

@pytest.mark.asyncio
async def test_cmd_continue_no_game(game_master, mock_update, context):
    """–¢–µ—Å—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã –∫–æ–≥–¥–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    db_query = f"DELETE FROM {TEST_TABLE_PREFIX}user_states WHERE user_id = 12345"
    game_master.db.execute_query(db_query)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
    mock_update.message.reply_text = AsyncMock()
    
    await game_master.cmd_continue(mock_update, context)
    
    mock_update.message.reply_text.assert_awaited_once()
    args = mock_update.message.reply_text.call_args[0][0]
    assert "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–≥—Ä—ã" in args

@pytest.mark.asyncio
async def test_cmd_status_no_game(game_master, mock_update, context):
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–≥–¥–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã"""
    await game_master.cmd_status(mock_update, context)
    
    mock_update.message.reply_text.assert_called_once()
    assert "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã" in mock_update.message.reply_text.call_args[0][0]

@pytest.mark.asyncio
async def test_cmd_reset_game(game_master, mock_update, context):
    """–¢–µ—Å—Ç —Å–±—Ä–æ—Å–∞ –∏–≥—Ä—ã"""
    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
    await game_master.cmd_play(mock_update, context)
    
    # –ó–∞—Ç–µ–º —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
    mock_update.message.reset_mock()
    await game_master.cmd_reset(mock_update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
    query = f"SELECT state FROM {TEST_TABLE_PREFIX}user_states WHERE user_id = 12345"
    result = game_master.db.execute_query(query)
    assert len(result) == 0
    
    mock_update.message.reply_text.assert_called_once()
    assert "–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞" in mock_update.message.reply_text.call_args[0][0]

@pytest.mark.asyncio
async def test_handle_choice(game_master, mock_update, context):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –≤ –∏–≥—Ä–µ"""
    # –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
    await game_master.cmd_play(mock_update, context)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏ –¥–ª—è callback_query
    mock_update.callback_query.data = "choice_2"
    mock_update.callback_query.from_user = Mock()
    mock_update.callback_query.from_user.id = 12345
    mock_update.callback_query.answer = AsyncMock()
    mock_update.callback_query.edit_message_text = AsyncMock()
    
    await game_master.handle_choice(mock_update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å
    query = f"SELECT state FROM {TEST_TABLE_PREFIX}user_states WHERE user_id = 12345"
    result = game_master.db.execute_query(query)
    assert result[0][0] == '2'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã –º–µ—Ç–æ–¥—ã callback_query
    mock_update.callback_query.answer.assert_called_once()
    mock_update.callback_query.edit_message_text.assert_called_once()

@pytest.mark.asyncio
async def test_get_current_scene_new_user(game_master):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ü–µ–Ω—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è None
    scene = await game_master.get_current_scene(12345)
    assert scene is None

    # –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –ø–µ—Ä–≤–∞—è —Å—Ü–µ–Ω–∞
    query = f"INSERT INTO {TEST_TABLE_PREFIX}user_states (user_id, state) VALUES (12345, '1')"
    game_master.db.execute_query(query)
    
    scene = await game_master.get_current_scene(12345)
    assert scene is not None
    assert scene['id'] == 1

@pytest.mark.asyncio
async def test_achievement_on_game_start(game_master, mock_update, context):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã"""
    with patch('achievements.AchievementManager.check_achievements') as mock_check:
        await game_master.cmd_play(mock_update, context)
        mock_check.assert_called_once_with(12345, "game_start")

@pytest.mark.asyncio
async def test_scene_options_format(game_master, mock_update, context):
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –æ–ø—Ü–∏–π –≤ —Å—Ü–µ–Ω–µ"""
    await game_master.cmd_play(mock_update, context)
    scene = await game_master.get_current_scene(12345)
    
    assert isinstance(scene['options'], dict)
    for option_id, option_text in scene['options'].items():
        assert isinstance(option_id, str)
        assert isinstance(option_text, str)

@pytest.mark.asyncio
async def test_invalid_choice(game_master, mock_update, context):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
    await game_master.cmd_play(mock_update, context)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä
    mock_update.callback_query.data = "invalid_choice"
    await game_master.handle_choice(mock_update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    query = f"SELECT state FROM {TEST_TABLE_PREFIX}user_states WHERE user_id = 12345"
    result = game_master.db.execute_query(query)
    assert result[0][0] == '1'