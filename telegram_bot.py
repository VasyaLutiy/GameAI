import logging
import sys
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
from db_manager import DatabaseManager
from game_master import GameMaster
from achievements import AchievementManager

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∏–≥—Ä–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
db = DatabaseManager()
game_master = GameMaster(db)
achievement_manager = AchievementManager(db)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TELEGRAM_TOKEN = "7559282389:AAF4FOrgAygx5Bdx8OHkyvMWuN-zeCbRzGs"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"User {user.id} started the bot")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    insert_query = """
    INSERT INTO users (user_id, username, first_name, last_name)
    VALUES (%s, %s, %s, %s)
    ON DUPLICATE KEY UPDATE
    username = VALUES(username),
    first_name = VALUES(first_name),
    last_name = VALUES(last_name)
    """
    
    try:
        db.execute_query(insert_query, (user.id, user.username, user.first_name, user.last_name))
        logger.info(f"User {user.id} information saved to database")
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /play —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∏–ª–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
        )
    except Exception as e:
        logger.error(f"Error saving user data: {e}")
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"User {update.effective_user.id} requested help")
    help_text = """
üéÆ –¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç - –ö–æ–º–∞–Ω–¥—ã:

/play - –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
/continue - –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É
/status - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å
/reset - –°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üìä –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:
/achievements - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
/achprogress - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
/inventory - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å

–£–¥–∞—á–∏ –≤ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏! üçÄ
"""
    await update.message.reply_text(help_text)

# –ü—Ä–æ–∫—Å–∏-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏–≥—Ä—ã
async def play_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await game_master.cmd_play(update, context)

async def continue_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await game_master.cmd_continue(update, context)

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await game_master.cmd_status(update, context)

async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await game_master.cmd_reset(update, context)

async def inventory_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await game_master.cmd_inventory(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback query –¥–ª—è –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await game_master.handle_choice(update, context)

async def achievements_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await game_master.cmd_achievements(update, context)

async def achievement_progress_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    logger.info(f"User {user_id} requested achievement progress")
    
    progress = achievement_manager.get_achievement_progress(user_id)
    message = f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:\n\n"
    message += f"‚úÖ –û—Ç–∫—Ä—ã—Ç–æ: {progress['unlocked']} –∏–∑ {progress['total']}\n"
    message += f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress['percentage']}%\n"
    
    if progress['percentage'] < 100:
        message += "\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –±–æ–ª—å—à–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π! üéÆ"
    else:
        message += "\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è! üéâ"
    
    await update.message.reply_text(message)

def main():
    logger.info("Bot is starting...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("play", play_command))
    application.add_handler(CommandHandler("continue", continue_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("reset", reset_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    application.add_handler(CommandHandler("achievements", achievements_command))
    application.add_handler(CommandHandler("achprogress", achievement_progress_command))
    application.add_handler(CommandHandler("inventory", inventory_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback query –¥–ª—è –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("Bot is running...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()