import os
import logging
import signal
from datetime import datetime
import asyncio
import pytz
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from test_vasilia import VasilisaLLM

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –í–∞—Å–∏–ª–∏—Å—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
# –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ "vector" –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
CONTEXT_PROVIDER = os.getenv("CONTEXT_PROVIDER", "simple_json")
vasilia = VasilisaLLM(context_provider=CONTEXT_PROVIDER)
logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –í–∞—Å–∏–ª–∏—Å—ã —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {CONTEXT_PROVIDER}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.full_name}) –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥")
    
    welcome_message = (
        f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}! –Ø {vasilia.current_profile["name"]}, –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–∞—Ä—å. '
        '–ë—É–¥—É —Ä–∞–¥–∞ –ø–æ–º–æ—á—å –≤–∞–º –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–µ–ª, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ä–µ—à–µ–Ω–∏–∏ '
        '–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á.\n\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mode –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞:\n'
        '‚Ä¢ default - —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è –í–∞—Å–∏–ª–∏—Å–∞\n'
        '‚Ä¢ cyber - –í–∞—Å–∏–ª–∏—Å–∞.exe –≤ —Å—Ç–∏–ª–µ –∫–∏–±–µ—Ä–ø–∞–Ω–∫\n'
        '‚Ä¢ sassy - –¥–µ—Ä–∑–∫–∞—è –í–∞—Å–∏–ª–∏—Å–∞\n\n'
        '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?'
    )
    
    await update.message.reply_text(welcome_message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "ü§ñ –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n"
        "/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/mode [—Ç–∏–ø] - –°–º–µ–Ω–∏—Ç—å –º–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä (default/cyber/sassy)\n\n"
        "üí´ –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:\n"
        "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ:\n"
        "   \"–ù–∞–ø–æ–º–Ω–∏ –≤ 15:30 –ø—Ä–æ –≤—Å—Ç—Ä–µ—á—É\"\n"
        "   \"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ 9:00 –ø—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ\"\n"
        "üìÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –¥–Ω—è –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n"
        "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∞–º–∏\n"
        "üíº –î–µ–ª–æ–≤—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏\n"
        "üòå –ë–æ—Ä—å–±–æ–π —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º\n"
        "ü§ù –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–µ–π –∏ –≤—Å—Ç—Ä–µ—á–∞–º–∏\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –æ —Å–≤–æ–µ–π –∑–∞–¥–∞—á–µ, –∏ —è –ø–æ–º–æ–≥—É –µ—ë —Ä–µ—à–∏—Ç—å!"
    )
    await update.message.reply_text(help_text)

async def mode_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mode –¥–ª—è —Å–º–µ–Ω—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞"""
    user = update.effective_user
    
    try:
        if not context.args:
            available_modes = ", ".join(vasilia.character_profiles.keys())
            await update.effective_message.reply_text(
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∂–∏–º: /mode [—Ç–∏–ø]\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: {available_modes}"
            )
            return
            
        mode = context.args[0].lower()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –º–µ–Ω—è–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä –Ω–∞: {mode}")
        
        result = vasilia.switch_character(mode)
        await update.effective_message.reply_text(result)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞: {e}")
        await update.effective_message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def show_reminders(telegram_id: int, chat_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from database import get_db, get_active_reminders, get_or_create_user
    
    try:
        with get_db() as db:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = get_or_create_user(db, telegram_id=telegram_id)
            logger.info(f"Checking reminders for user_id={db_user.id} (telegram_id={telegram_id})")
            reminders = get_active_reminders(db, db_user.id)
            logger.info(f"Found {len(reminders)} active reminders")
            if not reminders:
                return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."
            
            response = "üìÖ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
            for reminder in reminders:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —É–¥–æ–±–Ω—ã–π –≤–∏–¥
                formatted_time = reminder.datetime.astimezone(pytz.timezone('Europe/Moscow')).strftime("%d.%m.%Y %H:%M")
                response += f"‚Ä¢ {formatted_time}: {reminder.title}\n"
            return response
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    message_text = update.message.text
    chat_id = update.message.chat_id
    
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id} ({user.full_name}): {message_text}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        if any(phrase in message_text.lower() for phrase in ["–ø–æ–∫–∞–∂–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "–º–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "—Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"]):
            logger.info(f"User {user.id} requested reminders list")
            try:
                response = await show_reminders(user.id, chat_id)
                logger.info(f"Response for reminders: {response}")
                await update.message.reply_text(response)
            except Exception as e:
                logger.error(f"Error showing reminders: {str(e)}", exc_info=True)
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if "–Ω–∞–ø–æ–º–Ω–∏" in message_text.lower() or "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ" in message_text.lower():
            logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –≤—Ä–µ–º—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            import re
            from datetime import datetime, timedelta
            import pytz
            
            # –ò—â–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú
            time_match = re.search(r"(\d{1,2})[:-](\d{2})", message_text)
            if time_match:
                hours, minutes = map(int, time_match.groups())
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è: {hours}:{minutes}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
                if not (0 <= hours <= 23 and 0 <= minutes <= 59):
                    await update.message.reply_text(
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:30)"
                    )
                    return
                
                # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                now = datetime.now(pytz.timezone("Europe/Moscow"))
                reminder_time = now.replace(hour=hours, minute=minutes, second=0, microsecond=0)
                
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å
                if reminder_time <= now:
                    reminder_time += timedelta(days=1)
                    
                logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞: {reminder_time}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                title = message_text.lower()
                patterns = [
                    "–Ω–∞–ø–æ–º–Ω–∏ –≤", "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞", "–Ω–∞–ø–æ–º–Ω–∏", "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
                    f"{hours}:{minutes:02d}", f"{hours}:{minutes}",
                    "–≤ ", "–Ω–∞ "
                ]
                for pattern in patterns:
                    title = title.replace(pattern.lower(), "").strip()
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
                if title:
                    title = title[0].upper() + title[1:] if len(title) > 1 else title.upper()
                    
                    try:
                        # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        from database import get_db, get_or_create_user, create_reminder
                        with get_db() as db:
                            db_user = get_or_create_user(
                                db, 
                                telegram_id=user.id,
                                username=user.username,
                                first_name=user.first_name,
                                last_name=user.last_name
                            )
                            reminder = create_reminder(
                                db,
                                user_id=db_user.id,
                                chat_id=chat_id,
                                title=title,
                                reminder_time=reminder_time
                            )
                            
                            response = f"‚úÖ –•–æ—Ä–æ—à–æ, —è –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –æ \"{title}\" –≤ {reminder.formatted_datetime}"
                            logger.info(f"–°–æ–∑–¥–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {user.id}: {response}")
                            await update.message.reply_text(response)
                            return
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
                        await update.message.reply_text(
                            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                        )
                        return
                else:
                    await update.message.reply_text(
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: \"–ù–∞–ø–æ–º–Ω–∏ –≤ 15:30 –ø—Ä–æ –≤—Å—Ç—Ä–µ—á—É\""
                    )
                    return
            else:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                    "\"–ù–∞–ø–æ–º–Ω–∏ –≤ 15:30 –ø—Ä–æ –≤—Å—Ç—Ä–µ—á—É\""
                )
                return
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = await vasilia.get_response(message_text)
        logger.info(f"–û—Ç–≤–µ—Ç –¥–ª—è {user.id}: {response}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –∏—Å—Ç–æ—Ä–∏—é
        try:
            with get_db() as db:
                save_dialog(
                    db,
                    user_id=user.id,
                    message=message_text,
                    response=response,
                    character_mode=vasilia.character_mode
                )
                logger.info(f"–î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
        
        await update.message.reply_text(response)
        
    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user.id}: {str(e)}")
        await update.message.reply_text(
            "–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?"
        )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update}: {context.error}")

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    token = "7559282389:AAF4FOrgAygx5Bdx8OHkyvMWuN-zeCbRzGs"
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        from database import init_db
        init_db()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = (
            Application.builder()
            .token(token)
            .read_timeout(30)
            .write_timeout(30)
            .connect_timeout(30)
            .pool_timeout(30)
            .build()
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("mode", mode_command))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, 
            handle_message
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {vasilia.character_mode}")
        
        application.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise e

if __name__ == "__main__":
    run_bot()
