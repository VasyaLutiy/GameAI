import logging
import json
from typing import Optional, Dict
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from db_manager import DatabaseManager
from achievements import AchievementManager
from game_logic import GameLogic

class GameMaster:
    def __init__(self, db: DatabaseManager):
        self.db = db
        self.logger = logging.getLogger(__name__)
        self.achievement_manager = AchievementManager(db)
        self.game_logic = GameLogic(db)
        
        # –¢–∞–±–ª–∏—Ü—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.users_table = "users"
        self.scenes_table = "scenes"
        self.user_states_table = "user_states"

    async def get_current_scene(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ü–µ–Ω—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            query = f"SELECT state FROM {self.user_states_table} WHERE user_id = %s"
            result = self.db.execute_query(query, (user_id,))
            
            if not result:
                return None
            
            scene_id = int(result[0][0])
            return self.game_logic.get_scene(scene_id)
        except Exception as e:
            self.logger.error(f"Error getting current scene: {e}")
            return None

    async def cmd_play(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /play"""
        user_id = update.effective_user.id
        self.logger.info(f"User {user_id} started new game")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ü–µ–Ω—É
        query = f"""
        INSERT INTO {self.user_states_table} (user_id, state) 
        VALUES (%s, '1')
        ON DUPLICATE KEY UPDATE state = '1'
        """
        self.db.execute_query(query, (user_id,))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã
        self.achievement_manager.check_achievements(user_id, "game_start")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ü–µ–Ω—É
        scene = await self.get_current_scene(user_id)
        if scene:
            keyboard = []
            options = json.loads(scene['options']) if isinstance(scene['options'], str) else scene['options']
            for option_id, option_text in options.items():
                keyboard.append([InlineKeyboardButton(option_text, callback_data=f"choice_{option_id}")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                f"üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!\n\n{scene['description']}", 
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def cmd_continue(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /continue"""
        user_id = update.effective_user.id
        self.logger.info(f"User {user_id} continues game")
        
        scene = await self.get_current_scene(user_id)
        if scene and not scene.get('is_death_scene'):
            keyboard = []
            options = json.loads(scene['options']) if isinstance(scene['options'], str) else scene['options']
            for option_id, option_text in options.items():
                keyboard.append([InlineKeyboardButton(option_text, callback_data=f"choice_{option_id}")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                f"üéÆ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É...\n\n{scene['description']}", 
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–≥—Ä—ã –∏–ª–∏ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–≥–∏–±.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /play —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É."
            )

    async def cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        user_id = update.effective_user.id
        self.logger.info(f"User {user_id} requested status")
        
        scene = await self.get_current_scene(user_id)
        if scene:
            status_text = (
                "üìä –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∏–≥—Ä—ã:\n\n"
                f"üéØ –¢–µ–∫—É—â–∞—è —Å—Ü–µ–Ω–∞: {scene['id']}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {scene['description'][:100]}...\n"
            )
            if scene.get('is_death_scene'):
                status_text += "\nüíÄ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–≥–∏–±. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /play –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã."
            elif scene.get('npc_interaction'):
                status_text += f"\nüë• –¢–µ–∫—É—â–µ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: {scene['npc_interaction']}"
            
            await update.message.reply_text(status_text)
        else:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /play —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É."
            )

    async def cmd_achievements(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /achievements"""
        user_id = update.effective_user.id
        self.logger.info(f"User {user_id} requested achievements")
        
        achievements = self.achievement_manager.get_user_achievements(user_id)
        progress = self.achievement_manager.get_achievement_progress(user_id)
        
        if achievements:
            message = "üèÜ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n"
            for ach in achievements:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏–∫–æ–Ω–∫–∏ –≤ —ç–º–æ–¥–∑–∏
                icon = {
                    '[GAME]': 'üéÆ',
                    '[MAP]': 'üó∫Ô∏è',
                    '[SKULL]': 'üíÄ',
                    '[DEATH]': '‚ò†Ô∏è'
                }.get(ach['icon'], '‚Ä¢')
                
                message += f"{icon} {ach['name']} ({ach['points']} –æ—á–∫–æ–≤)\n"
                message += f"  ‚îú {ach['description']}\n"
                message += f"  ‚îî –ü–æ–ª—É—á–µ–Ω–æ: {ach['unlocked_at'].strftime('%Y-%m-%d %H:%M')}\n\n"
            
            message += f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress['unlocked']}/{progress['total']} ({progress['percentage']}%)"
        else:
            message = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ò–≥—Ä–∞–π—Ç–µ –±–æ–ª—å—à–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏—Ö!"
        
        await update.message.reply_text(message)

    async def cmd_reset(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset"""
        user_id = update.effective_user.id
        self.logger.info(f"User {user_id} requested game reset")
        
        query = f"DELETE FROM {self.user_states_table} WHERE user_id = %s"
        result = self.db.execute_query(query, (user_id,))
        
        if result is not None:
            await update.message.reply_text(
                "üîÑ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /play —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É."
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∏–≥—Ä—ã.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def handle_choice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ –≤ –∏–≥—Ä–µ"""
        query = update.callback_query
        user_id = query.from_user.id
        
        try:
            choice_id = int(query.data.split('_')[1])
            self.logger.info(f"User {user_id} made choice: {choice_id}")
            
            current_scene = await self.get_current_scene(user_id)
            if not current_scene:
                await query.answer("‚ùå –û—à–∏–±–∫–∞: —Å—Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            success, message, new_scene = self.game_logic.process_choice(
                current_scene['id'], choice_id
            )
            
            if not success:
                await query.answer(message)
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            update_query = f"""
            UPDATE {self.user_states_table} 
            SET state = %s 
            WHERE user_id = %s
            """
            self.db.execute_query(update_query, (new_scene['id'], user_id))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            if current_scene.get('npc_interaction'):
                self.achievement_manager.check_achievements(
                    user_id, 
                    "npc_interaction", 
                    {"npc": current_scene['npc_interaction']}
                )
            
            if new_scene.get('is_death_scene'):
                self.achievement_manager.check_achievements(user_id, "death")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ü–µ–Ω—É
            keyboard = []
            if not new_scene.get('is_death_scene') and new_scene.get('options'):
                options = json.loads(new_scene['options']) if isinstance(new_scene['options'], str) else new_scene['options']
                for option_id, option_text in options.items():
                    keyboard.append([InlineKeyboardButton(option_text, callback_data=f"choice_{option_id}")])
            
            reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
            
            await query.answer()
            message_text = new_scene['description']
            if new_scene.get('is_death_scene'):
                message_text += "\n\nüíÄ –í—ã –ø–æ–≥–∏–±–ª–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /play –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã."
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–≤—É—é —Å–º–µ—Ä—Ç—å
                self.achievement_manager.check_achievements(user_id, "first_death")
            
            await query.edit_message_text(
                text=message_text,
                reply_markup=reply_markup
            )
                
        except Exception as e:
            self.logger.error(f"Error handling choice: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞")