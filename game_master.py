from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, CallbackQueryHandler, ContextTypes
from db_manager import DatabaseManager
import logging
import json

class GameMaster:
    def __init__(self, db: DatabaseManager):
        self.db = db
        self.logger = logging.getLogger(__name__)
        from achievements import AchievementManager
        self.achievement_manager = AchievementManager(db)

    async def get_current_scene(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ü–µ–Ω—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            query = "SELECT state FROM user_states WHERE user_id = %s"
            result = self.db.execute_query(query, (user_id,))
            
            if not result:
                # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ü–µ–Ω—ã
                return self.get_scene(1)
            
            scene_id = int(result[0][0])
            return self.get_scene(scene_id)
        except Exception as e:
            self.logger.error(f"Error getting current scene: {e}")
            return None

    def get_scene(self, scene_id: int) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ü–µ–Ω—É –ø–æ ID"""
        query = """
        SELECT id, parent, description, options 
        FROM scenes 
        WHERE id = %s
        """
        result = self.db.execute_query(query, (scene_id,))
        if result:
            scene_data = result[0]
            return {
                'id': scene_data[0],
                'parent': scene_data[1],
                'description': scene_data[2],
                'options': json.loads(scene_data[3]) if scene_data[3] else {}
            }
        return None

    async def cmd_play(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /play"""
        user_id = update.effective_user.id
        self.logger.info(f"User {user_id} started new game")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ü–µ–Ω—É
        query = """
        INSERT INTO user_states (user_id, state) 
        VALUES (%s, '1')
        ON DUPLICATE KEY UPDATE state = '1'
        """
        self.db.execute_query(query, (user_id,))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã
        self.achievement_manager.check_achievements(user_id, "game_start")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ü–µ–Ω—É
        scene = await self.get_current_scene(user_id)
        if scene:
            keyboard = []
            for option_id, option_text in scene['options'].items():
                keyboard.append([InlineKeyboardButton(option_text, callback_data=f"choice_{option_id}")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                f"üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!\n\n{scene['description']}", 
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def cmd_continue(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /continue"""
        user_id = update.effective_user.id
        self.logger.info(f"User {user_id} continues game")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ü–µ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        scene = await self.get_current_scene(user_id)
        if scene:
            keyboard = []
            for option_id, option_text in scene['options'].items():
                keyboard.append([InlineKeyboardButton(option_text, callback_data=f"choice_{option_id}")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                f"üéÆ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É...\n\n{scene['description']}", 
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–≥—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /play —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É."
            )

    async def cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        user_id = update.effective_user.id
        self.logger.info(f"User {user_id} requested status")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        query = """
        SELECT us.state, s.description, u.created_at
        FROM user_states us
        JOIN users u ON u.user_id = us.user_id
        LEFT JOIN scenes s ON s.id = CAST(us.state AS SIGNED)
        WHERE us.user_id = %s
        """
        result = self.db.execute_query(query, (user_id,))
        
        if result and result[0][0]:
            scene_id, current_scene, start_date = result[0]
            status_text = (
                "üìä –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∏–≥—Ä—ã:\n\n"
                f"üéØ –¢–µ–∫—É—â–∞—è —Å—Ü–µ–Ω–∞: {scene_id}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {current_scene[:100]}...\n"
                f"üìÖ –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã: {start_date.strftime('%Y-%m-%d %H:%M')}\n"
            )
            await update.message.reply_text(status_text)
        else:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /play —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É."
            )

    async def cmd_reset(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset"""
        user_id = update.effective_user.id
        self.logger.info(f"User {user_id} requested game reset")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        query = "DELETE FROM user_states WHERE user_id = %s"
        result = self.db.execute_query(query, (user_id,))
        
        if result is not None:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–±—Ä–æ—Å–µ –≤ —Å–µ—Å—Å–∏–∏
            session_query = """
            INSERT INTO user_sessions (user_id, session_key, session_value, expires_at)
            VALUES (%s, 'game_reset', 'Game reset by user', DATE_ADD(NOW(), INTERVAL 1 MONTH))
            """
            self.db.execute_query(session_query, (user_id,))
            
            await update.message.reply_text(
                "üîÑ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /play —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É."
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∏–≥—Ä—ã.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def handle_choice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ –≤ –∏–≥—Ä–µ"""
        query = update.callback_query
        user_id = query.from_user.id
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ü–µ–Ω—ã –∏–∑ callback_data
            choice_id = int(query.data.split('_')[1])
            self.logger.info(f"User {user_id} made choice: {choice_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ü–µ–Ω—É –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            current_scene = await self.get_current_scene(user_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            update_query = """
            UPDATE user_states 
            SET state = %s 
            WHERE user_id = %s
            """
            self.db.execute_query(update_query, (choice_id, user_id))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            if current_scene:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ü–µ–Ω–∞ "—Å–º–µ—Ä—Ç–µ–ª—å–Ω–æ–π"
                if "death" in current_scene.get('description', '').lower():
                    self.achievement_manager.check_achievements(user_id, "death")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
                if not current_scene.get('options'):
                    self.achievement_manager.check_achievements(user_id, "game_complete")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ª–æ–∫–∞—Ü–∏–π
                self.achievement_manager.check_achievements(user_id, "explore_location", 
                    {"location_id": choice_id})
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Å—Ü–µ–Ω—É
            new_scene = await self.get_current_scene(user_id)
            if new_scene:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
                keyboard = []
                for option_id, option_text in new_scene['options'].items():
                    keyboard.append([InlineKeyboardButton(option_text, callback_data=f"choice_{option_id}")])
                
                reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
                
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await query.answer()
                await query.edit_message_text(
                    text=new_scene['description'],
                    reply_markup=reply_markup
                )
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ü–µ–Ω—ã")
                
        except Exception as e:
            self.logger.error(f"Error handling choice: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞")