import logging
from typing import Optional
from database import get_db
from models.user import User
from models.dialog_summary import DialogSummary
from models.chat_history import ChatHistory
from services.summarization import SummaryManager

logger = logging.getLogger(__name__)

class SummaryContextProvider:
    def __init__(self):
        self.summary_manager = SummaryManager()
        self.recent_messages_limit = 20
        self.context_cache = {}  # –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ user_id
        
    async def load_last_context(self, user_id: int) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            logger.info(f"Loading last context for user {user_id}")
            with get_db() as db:
                user = db.query(User).filter_by(telegram_id=user_id).first()
                if not user:
                    logger.warning(f"User {user_id} not found")
                    return ""
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ —Å–µ—Å—Å–∏–∏
                summaries = list(user.summaries)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
                chat_history = list(user.chat_history)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
                recent_messages = list(user.get_recent_dialogs(5))  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                current_mode = user.character_mode or 'default'
                
                logger.info(f"Found user {user.id} with {len(summaries)} summaries and {len(chat_history)} messages")
                
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π L2 —Å–∞–º–º–∞—Ä–∏
                l2_summaries = [s for s in summaries if s.level == 2]
                if l2_summaries:
                    l2_summary = max(l2_summaries, key=lambda x: x.created_at)
                    logger.info(f"Found L2 summary: {l2_summary.summary_text[:100]}...")
                    self.context_cache[user_id] = l2_summary.summary_text
                    return l2_summary.summary_text
                else:
                    logger.info("No L2 summaries found")
                
                # –ï—Å–ª–∏ –Ω–µ—Ç L2, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ L1
                l1_summaries = [s for s in summaries if s.level == 1]
                l1_summaries.sort(key=lambda x: x.created_at, reverse=True)
                l1_summaries = l1_summaries[:3]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
                if l1_summaries:
                    logger.info(f"Found {len(l1_summaries)} L1 summaries")
                    for i, s in enumerate(l1_summaries):
                        logger.info(f"Summary {i+1}: {s.summary_text[:100]}...")
                    combined = self._combine_summaries(l1_summaries)
                    self.context_cache[user_id] = combined
                    return combined
                else:
                    logger.info("No L1 summaries found")
                
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–∞–º–º–∞—Ä–∏, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if recent_messages:
                    logger.info(f"Found {len(recent_messages)} recent messages")
                    for i, msg in enumerate(recent_messages):
                        logger.info(f"Message {i+1}: {msg.message[:50]}... -> {msg.response[:50]}...")
                    formatted_text = self._format_dialog_history(recent_messages)
                    self.context_cache[user_id] = formatted_text
                    return formatted_text
                else:
                    logger.info("No messages found")
                
                logger.info("No context available")
                return ""
                
        except Exception as e:
            logger.error(f"Error loading last context: {e}", exc_info=True)
            logger.error("Stack trace:", exc_info=True)
            return ""
            
    def _get_last_summary(self, user: User, level: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∞–º–º–∞—Ä–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
        from sqlalchemy import desc
        summaries = [s for s in user.summaries if s.level == level]
        if not summaries:
            return None
        return max(summaries, key=lambda x: x.created_at)
    
    def _get_last_summaries(self, user: User, level: int, limit: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
        summaries = [s for s in user.summaries if s.level == level]
        summaries.sort(key=lambda x: x.created_at, reverse=True)
        return summaries[:limit]
    
    def _combine_summaries(self, summaries: list) -> str:
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∞–º–º–∞—Ä–∏ –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç"""
        if not summaries:
            return ""
        
        parts = []
        for i, summary in enumerate(summaries, 1):
            parts.append(f"=== –°–∞–º–º–∞—Ä–∏ #{i} ===")
            if hasattr(summary, 'summary_text'):
                parts.append(summary.summary_text)
            else:
                parts.append(str(summary))
            parts.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            
        result = "\n".join(parts)
        logger.info(f"Combined {len(summaries)} summaries, total length: {len(result)}")
        return result
        
    def _format_dialog_history(self, messages: list, include_stats: bool = True) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"""
        if not messages:
            return "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞."
            
        formatted = []
        formatted.append("üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        for msg in messages:
            timestamp = msg.timestamp.strftime("%H:%M:%S")
            formatted.append(f"[{timestamp}] User: {msg.message}")
            formatted.append(f"[{timestamp}] Assistant ({msg.character_mode}): {msg.response}")
            formatted.append("-" * 40)
        
        return "\n".join(formatted)

    def _get_dialog_stats(self, messages: list, summaries: list, current_mode: str) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∏–∞–ª–æ–≥–∞"""
        if not messages:
            return "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞"
            
        stats = []
        stats.append("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞:")
        stats.append(f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        stats.append(f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —Å–∞–º–º–∞—Ä–∏: {len(summaries)}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–∞—Ö
        modes = set(msg.character_mode for msg in messages)
        stats.append(f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ä–µ–∂–∏–º–æ–≤: {len(modes)}")
        if modes:
            stats.append(f"‚Ä¢ –†–µ–∂–∏–º—ã: {', '.join(modes)}")
        stats.append(f"‚Ä¢ –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {current_mode}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
        if messages:
            first_msg = min(messages, key=lambda x: x.timestamp)
            last_msg = max(messages, key=lambda x: x.timestamp)
            stats.append(f"‚Ä¢ –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {first_msg.timestamp.strftime('%d.%m.%Y %H:%M')}")
            stats.append(f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {last_msg.timestamp.strftime('%d.%m.%Y %H:%M')}")
        
        return "\n".join(stats)

    async def extract_user_profile_from_history(self, user_id: int) -> dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –ø–æ–º–æ—â—å—é LLM"""
        try:
            with get_db() as db:
                user = db.query(User).filter_by(telegram_id=user_id).first()
                if not user:
                    return {}
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤
                chat_history = list(user.chat_history)
                if not chat_history:
                    return {}
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                dialog_text = []
                for msg in chat_history:
                    dialog_text.append(f"User: {msg.message}")
                    dialog_text.append(f"Assistant: {msg.response}")
                    dialog_text.append("-" * 40)
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM
                prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥ –∏ –∏–∑–≤–ª–µ–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
–î–∏–∞–ª–æ–≥:
{chr(10).join(dialog_text)}

–ò–∑–≤–ª–µ–∫–∏ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
1. name - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. age - –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ)
3. occupation - —Ä–æ–¥ –∑–∞–Ω—è—Ç–∏–π/–ø—Ä–æ—Ñ–µ—Å—Å–∏—è
4. interests - –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —É–≤–ª–µ—á–µ–Ω–∏—è
5. character - —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—è–≤–∏–ª–∏—Å—å –≤ –¥–∏–∞–ª–æ–≥–µ
6. communication_style - —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
{{
    "name": "–∏–º—è –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
    "age": —á–∏—Å–ª–æ –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ,
    "occupation": "–ø—Ä–æ—Ñ–µ—Å—Å–∏—è –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
    "interests": ["–∏–Ω—Ç–µ—Ä–µ—Å1", "–∏–Ω—Ç–µ—Ä–µ—Å2"] –∏–ª–∏ [] –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ,
    "character": ["—á–µ—Ä—Ç–∞1", "—á–µ—Ä—Ç–∞2"] –∏–ª–∏ [] –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ,
    "communication_style": ["—Å—Ç–∏–ª—å1", "—Å—Ç–∏–ª—å2"] –∏–ª–∏ [] –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
}}
"""
                from llm_integration import llm_manager
                import json

                # –í—ã–∑—ã–≤–∞–µ–º LLM API
                try:
                    response = await llm_manager.get_response(prompt)
                    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    try:
                        profile_data = json.loads(response)
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        if profile_data.get('name'):
                            user.update_user_info('name', profile_data['name'])
                        if profile_data.get('age'):
                            user.update_user_info('age', str(profile_data['age']))
                        if profile_data.get('occupation'):
                            user.update_user_info('occupation', profile_data['occupation'])
                        if profile_data.get('interests'):
                            user.update_user_info('interests', ', '.join(profile_data['interests']))
                        if profile_data.get('character'):
                            user.update_user_info('character_traits', ', '.join(profile_data['character']))
                        if profile_data.get('communication_style'):
                            user.update_user_info('communication_style', ', '.join(profile_data['communication_style']))
                        db.commit()
                        return profile_data
                    except json.JSONDecodeError as e:
                        logger.error(f"Error parsing LLM response as JSON: {e}")
                        logger.error(f"Raw response: {response}")
                        return {}
                except Exception as e:
                    logger.error(f"Error getting LLM response: {e}")
                    return {}
                
        except Exception as e:
            logger.error(f"Error extracting user profile from history: {e}")
            return {}

    async def get_context(self, message: str, user_id: int) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è:
        1. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∞–º–º–∞—Ä–∏
        2. –ü–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π
        3. –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
        4. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–∞–º–º–∞—Ä–∏
            logger.info(f"Checking for new summaries for user {user_id}")
            await self.summary_manager.check_and_create_summaries(user_id)
            
            with get_db() as db:
                user = db.query(User).filter_by(telegram_id=user_id).first()
                if not user:
                    return ""
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
                if user_id not in self.context_cache:
                    logger.info("No cached context found, loading last context")
                    await self.load_last_context(user_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                cached_context = self.context_cache.get(user_id, "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
                logger.info(f"Using cached context, length: {len(cached_context)}")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ —Å–µ—Å—Å–∏–∏
                chat_history = list(db.query(ChatHistory).filter_by(user_id=user.id).all())
                recent_messages = sorted(chat_history, key=lambda x: x.timestamp, reverse=True)[:5]
                summaries = list(db.query(DialogSummary).filter_by(user_id=user.id).all())
                current_mode = user.character_mode or 'default'
                user_profile = user.get_user_profile()
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                logger.info("Getting recent messages and stats")
                recent_messages_text = self._format_dialog_history(recent_messages)
                stats_text = self._get_dialog_stats(chat_history, summaries, current_mode)
                
                logger.info(f"Current character mode: {current_mode}")
                logger.info(f"User profile: {user_profile}")

                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context_parts = [
                    "=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï ===",
                    user_profile,
                    "\n=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ò–ê–õ–û–ì–ê ===",
                    stats_text,
                    "\n=== –ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–û–í ===",
                    cached_context,
                    "\n=== –ü–û–°–õ–ï–î–ù–ò–ô –ö–û–ù–¢–ï–ö–°–¢ ===",
                    recent_messages_text,
                    "\n=== –¢–ï–ö–£–©–ï–ï –°–û–û–ë–©–ï–ù–ò–ï ===",
                    f"User: {message}"
                ]

                result = "\n".join(filter(None, context_parts))
                logger.info(f"Generated context, length: {len(result)}")
                return result

        except Exception as e:
            logger.error(f"Error getting context: {e}")
            return ""